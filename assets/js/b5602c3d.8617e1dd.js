"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[6672],{5788:(e,a,n)=>{n.d(a,{Iu:()=>p,yg:()=>y});var t=n(1504);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=t.createContext({}),c=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(o.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=l,y=u["".concat(o,".").concat(g)]||u[g]||m[g]||r;return n?t.createElement(y,i(i({ref:a},p),{},{components:n})):t.createElement(y,i({ref:a},p))}));function y(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[u]="string"==typeof e?e:l,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2216:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=n(5072),l=(n(1504),n(5788));const r={title:"3- Object-Oriented Programming in Scala"},i=void 0,s={unversionedId:"languages/scala/course/object-oriented-programming-in-scala",id:"languages/scala/course/object-oriented-programming-in-scala",title:"3- Object-Oriented Programming in Scala",description:"Equality in Scala",source:"@site/sections/developer/languages/scala/course/3_object-oriented-programming-in-scala.md",sourceDirName:"languages/scala/course",slug:"/languages/scala/course/object-oriented-programming-in-scala",permalink:"/developer/languages/scala/course/object-oriented-programming-in-scala",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3- Object-Oriented Programming in Scala"},sidebar:"docs",previous:{title:"1- Introduction to Scala",permalink:"/developer/languages/scala/course/introduction-to-scala"},next:{title:"Get field names of a case class",permalink:"/developer/languages/scala/hacks & tricks/case-class-fields"}},o={},c=[{value:"Equality in Scala",id:"equality-in-scala",level:2},{value:"Default arguments",id:"default-arguments",level:2},{value:"Packages and Imports",id:"packages-and-imports",level:2},{value:"Infix, Postfix and Prefix Operators",id:"infix-postfix-and-prefix-operators",level:2},{value:"Infix",id:"infix",level:3},{value:"Postfix",id:"postfix",level:3},{value:"Prefix",id:"prefix",level:3},{value:"Convention for Operator Notation",id:"convention-for-operator-notation",level:3},{value:"Access Modifiers",id:"access-modifiers",level:2},{value:"Companion Object",id:"companion-object",level:2},{value:"Predef",id:"predef",level:2},{value:"Case classes",id:"case-classes",level:2}],p={toc:c},u="wrapper";function m(e){let{components:a,...n}=e;return(0,l.yg)(u,(0,t.c)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"equality-in-scala"},"Equality in Scala"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'new String("Scala") == new String("Scala") // true\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Use "==" for equality'),(0,l.yg)("li",{parentName:"ul"},'No defference between "primitive" or "reference" like in Java'),(0,l.yg)("li",{parentName:"ul"},"There is no type check, because the compilation will not event happen if the types are not the same")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'new String("Scala") eq new String("Scala") // false\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Use "eq" and "ne" for checking identity (compare references)'),(0,l.yg)("li",{parentName:"ul"},"Comparison in Scala is null safe")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},"null == null // true\n")),(0,l.yg)("h2",{id:"default-arguments"},"Default arguments"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'def name(first: String = "", last: String = ""): String\n\nval person = name("John")\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Lets you omit trailing arguments"),(0,l.yg)("li",{parentName:"ul"},"Can omit leading arguments by using named arguments")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'val person = name(last = "Doe")\n')),(0,l.yg)("h2",{id:"packages-and-imports"},"Packages and Imports"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},"import dev.sharek.tutorials.scalacars.Car\nimport dev.sharek.tutorials.scalacars._\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Use ",(0,l.yg)("em",{parentName:"li"},"Import")," if you don't want to use the fully qualified name"),(0,l.yg)("li",{parentName:"ul"},"Use the underscore ",(0,l.yg)("em",{parentName:"li"},"_")," to import all members of a package")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},"import dev.sharek.tutorials.scalacars.{YellowCar, RedCar}\nimport dev.sharek.tutorials.scalacars.{Car => OldCar}\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Import multiple members with {...}"),(0,l.yg)("li",{parentName:"ul"},"Rename imported objects to avoid conflicts")),(0,l.yg)("h2",{id:"infix-postfix-and-prefix-operators"},"Infix, Postfix and Prefix Operators"),(0,l.yg)("h3",{id:"infix"},"Infix"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Operators are methods used in operator notation"),(0,l.yg)("li",{parentName:"ul"},"Operator nation means ommitting dots and parentheses "),(0,l.yg)("li",{parentName:"ul"},"Methods with one parameter can be used in ",(0,l.yg)("strong",{parentName:"li"},"Infix")," notation")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'"Hamza is a data engineer".split(" ")\n\n"Hamza is a data engineer" split " "\n')),(0,l.yg)("h3",{id:"postfix"},"Postfix"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Methods without parameters can be used in ",(0,l.yg)("strong",{parentName:"li"},"Postfix")," notation"),(0,l.yg)("li",{parentName:"ul"},"In general, Postfix notation is depreceated ")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'"Hamza is a data engineer".split(" ").size\n\n"Hamza is a data engineer" split " " size\n')),(0,l.yg)("h3",{id:"prefix"},"Prefix"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Methods starting with ",(0,l.yg)("strong",{parentName:"li"},"unary_")," keyword followed by +, -, ! or ~ can be used in prefix notation")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},"! true\n\ntrue.unary_!\n")),(0,l.yg)("h3",{id:"convention-for-operator-notation"},"Convention for Operator Notation"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Use Infix for methods with Symbolic names"),(0,l.yg)("li",{parentName:"ul"},"Use Prefix for unary_ methods"),(0,l.yg)("li",{parentName:"ul"},"Otherwise use dot notation")),(0,l.yg)("h2",{id:"access-modifiers"},"Access Modifiers"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'class Hello {\n    private val message = "Hello"\n}\n\nclass Welcome {\n    protected val message = "Welcome"\n}\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"By default, all members are ",(0,l.yg)("em",{parentName:"li"},"public")),(0,l.yg)("li",{parentName:"ul"},"Use private to restrict access"),(0,l.yg)("li",{parentName:"ul"},"Using protected makes the member only visible within the enclosing entity or subclasses")),(0,l.yg)("h2",{id:"companion-object"},"Companion Object"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'object Welcome {\n    private val message: String = "Welcome"\n}\n\nclass Welcome {\n    def Greet(msg: String = Welcome.message): String = msg\n}\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"When a class and an object having the same name, located in the same file and package, they are called Companion"),(0,l.yg)("li",{parentName:"ul"},"Class can access Companion private members"),(0,l.yg)("li",{parentName:"ul"},"Companion are useful for these use cases :",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Having a class utility"),(0,l.yg)("li",{parentName:"ul"},"Having a class static methods"),(0,l.yg)("li",{parentName:"ul"},"Constructing a class factory ")))),(0,l.yg)("h2",{id:"predef"},"Predef"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"scala.Predef")," is a singleton object"),(0,l.yg)("li",{parentName:"ul"},"It's part of the standard library, it has many useful functions, and needs to be explicitly imported into Scala classes"),(0,l.yg)("li",{parentName:"ul"},"all it's members are imported automatically to any scala script (import scala.Predef._)"),(0,l.yg)("li",{parentName:"ul"},"require method is a member of Predef")),(0,l.yg)("h2",{id:"case-classes"},"Case classes"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'case class Person(name: String)\n\nval p1 = Person("John")\nval p2 = Person.apply("Christopher")\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"case")," adds several additional features to a class :",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"create new instance without ",(0,l.yg)("inlineCode",{parentName:"li"},"new")," keyword"),(0,l.yg)("li",{parentName:"ul"},"each case class has a companion object that has an apply method"),(0,l.yg)("li",{parentName:"ul"},"compiler creates nice toString, equals and hashCode implementations"),(0,l.yg)("li",{parentName:"ul"},"class parameters are promoted to immutable fields automatically"),(0,l.yg)("li",{parentName:"ul"},"copy method is automatically implemented"),(0,l.yg)("li",{parentName:"ul"},"used in pattern matching")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Why are not all classes case-classes ?")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Overhead in bytecode size"),(0,l.yg)("li",{parentName:"ul"},"Can not inherit a case class from another")),(0,l.yg)("p",null,(0,l.yg)("em",{parentName:"p"},"Best Practices"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Value objects are perfect for case classes => data holders"),(0,l.yg)("li",{parentName:"ul"},"Service objects should not be case classes")))}m.isMDXComponent=!0}}]);