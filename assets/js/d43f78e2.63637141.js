(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{119:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(7),o=(a(0),a(131)),i={title:"Quick wins"},l={unversionedId:"spark/optimizations/quick_wins",id:"spark/optimizations/quick_wins",isDocsHomePage:!1,title:"Quick wins",description:"Here are simple rules to follow to avoid crashing your spark job :",source:"@site/notes/big_data_notes/spark/optimizations/quick_wins.mdx",slug:"/spark/optimizations/quick_wins",permalink:"/big_data/spark/optimizations/quick_wins",version:"current",sidebar:"docs",previous:{title:"Overview",permalink:"/big_data/spark/optimizations/overview"},next:{title:"ReduceByKey vs GroupByKey",permalink:"/big_data/spark/optimizations/reducebykey_vs_groupbykey"}},c=[{value:"Avoid collecting to your driver",id:"avoid-collecting-to-your-driver",children:[]},{value:"Avoid collect_list",id:"avoid-collect_list",children:[]},{value:"Avoid counting",id:"avoid-counting",children:[]},{value:"use Broadcast for small datasets",id:"use-broadcast-for-small-datasets",children:[]}],s={toc:c};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Here are simple rules to follow to avoid crashing your spark job :"),Object(o.b)("h2",{id:"avoid-collecting-to-your-driver"},"Avoid collecting to your driver"),Object(o.b)("p",null,"If your Dataset is so large that all of it's elements won't fit in memory on the drive machine, don't collect dataset\nto the driver. Collect will attempt to copy every single element in the RDD onto the single driver program, and then run\nout of memory and crash."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"val values = ds.collect()\n")),Object(o.b)("p",null,"Instead, you can make sure the number of elements you return is capped by calling ",Object(o.b)("inlineCode",{parentName:"p"},"take")," or ",Object(o.b)("inlineCode",{parentName:"p"},"takeSample"),", or perhaps\nfiltering or sampling your Dataset."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"val values = ds.take(10)\n")),Object(o.b)("p",null,"Similarly, be cautious of these other actions as well unless you are sure your dataset size is small enough to fit in\nmemory:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"countByKey")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"countByValue")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"collectAsMap"))),Object(o.b)("h2",{id:"avoid-collect_list"},"Avoid collect_list"),Object(o.b)("h2",{id:"avoid-counting"},"Avoid counting"),Object(o.b)("p",null,"Don't use count() when you don't need to return the exact number of rows. You can use this :"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"if (df.takeAsList(1).size() == 0) {...}\n\nor\n\nif (df.queryExecution.toRdd.isEmpty()) {...}\n\nor\n\nif (ds.rdd.isEmpty()) {...}\n")),Object(o.b)("p",null,"With RDDs, you can use isEmpty() because if you see ",Object(o.b)("a",{parentName:"p",href:"https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/rdd/RDD.scala"},"the code"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"  /**\n   * @note Due to complications in the internal implementation, this method will raise an\n   * exception if called on an RDD of `Nothing` or `Null`. This may be come up in practice\n   * because, for example, the type of `parallelize(Seq())` is `RDD[Nothing]`.\n   * (`parallelize(Seq())` should be avoided anyway in favor of `parallelize(Seq[T]())`.)\n   * @return true if and only if the RDD contains no elements at all. Note that an RDD\n   *         may be empty even when it has at least 1 partition.\n   */\n  def isEmpty(): Boolean = withScope {\n    partitions.length == 0 || take(1).length == 0\n  }\n")),Object(o.b)("h2",{id:"use-broadcast-for-small-datasets"},"use Broadcast for small datasets"),Object(o.b)("p",null,"Spark can \u201cbroadcast\u201d a small DataFrame by sending all the data in that small DataFrame to all nodes in the cluster.\nAfter the small DataFrame is broadcasted, Spark can perform a join without shuffling any of the data in the large DataFrame."),Object(o.b)("p",null,"Let\u2019s create a DataFrame with information about people and another DataFrame with information about cities. In this\nexample, the peopleDF is huge and the citiesDF is tiny. In this case broadcasting the citiesDF will accelerate the join."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala",metastring:"{7}","{7}":!0},'val citiesDF = Seq(\n  ("medellin", "colombia", 2.5),\n  ("bangalore", "india", 12.3)\n).toDF("city", "country", "population")\n\npeopleDF.join(\n  broadcast(citiesDF),\n  peopleDF("city") <=> citiesDF("city")\n).show()\n')),Object(o.b)("p",null,"By default, spark will broadcast automatically any dataset with size under 10 MB. You can modify this threshold with\n",Object(o.b)("inlineCode",{parentName:"p"},"spark.sql.autoBroadcastJoinThreshold")," property."))}u.isMDXComponent=!0},131:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(a),b=n,m=p["".concat(i,".").concat(b)]||p[b]||d[b]||o;return a?r.a.createElement(m,l(l({ref:t},s),{},{components:a})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);