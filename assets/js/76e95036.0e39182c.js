"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[1707],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),p=i,y=c["".concat(d,".").concat(p)]||c[p]||f[p]||a;return t?r.createElement(y,o(o({ref:n},u),{},{components:t})):r.createElement(y,o({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={title:"Node Affinity"},o=void 0,s={unversionedId:"kubernetes/internals/node_affinity",id:"kubernetes/internals/node_affinity",title:"Node Affinity",description:"Description",source:"@site/sections/containers/kubernetes/internals/node_affinity.md",sourceDirName:"kubernetes/internals",slug:"/kubernetes/internals/node_affinity",permalink:"/containers/kubernetes/internals/node_affinity",draft:!1,tags:[],version:"current",frontMatter:{title:"Node Affinity"},sidebar:"docs",previous:{title:"Configure k8s cluster",permalink:"/containers/kubernetes/hacks-and-tricks/configure_k8s_cluster"},next:{title:"Storage",permalink:"/containers/kubernetes/internals/storage"}},d={},l=[{value:"Description",id:"description",level:2},{value:"Label based affinity",id:"label-based-affinity",level:2},{value:"Schedule a Pod using required node affinity",id:"schedule-a-pod-using-required-node-affinity",level:3},{value:"Schedule a Pod using preferred node affinity",id:"schedule-a-pod-using-preferred-node-affinity",level:3}],u={toc:l},c="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Node affinity is a set of rules used by the scheduler to determine where a pod can be placed. The rules are defined using custom labels on nodes and label selectors specified in pods."),(0,i.kt)("p",null,"Node affinity allows a pod to specify an affinity (or anti-affinity) towards a group of nodes it can be placed on. "),(0,i.kt)("admonition",{title:"Use cases",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Nodes with different architectures : arm / amd."),(0,i.kt)("li",{parentName:"ul"},"Nodes with different purposes: worker nodes/ data nodes."))),(0,i.kt)("p",null,"There are two types of node affinity rules: required and preferred."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Required rules must be met before a pod can be scheduled on a node. Preferred rules specify that, if the rule is met, the scheduler tries to enforce the rules, but does not guarantee enforcement.")),(0,i.kt)("h2",{id:"label-based-affinity"},"Label based affinity"),(0,i.kt)("p",null,"Here is an example how to enforce affinity :"),(0,i.kt)("p",null,"1- Add a label to a node :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kubectl get nodes --show-labels\n")),(0,i.kt)("p",null,"The output is similar to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"NAME      STATUS    ROLES    AGE     VERSION        LABELS\nworker0   Ready     <none>   1d      v1.13.0        ...,kubernetes.io/hostname=worker0\nworker1   Ready     <none>   1d      v1.13.0        ...,kubernetes.io/hostname=worker1\ndata-node   Ready     <none>   1d      v1.13.0        ...,kubernetes.io/hostname=data-node\n")),(0,i.kt)("p",null,"2- Chose one of your nodes, and add a label to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kubectl label nodes <your-node-name> disktype=ssd\n")),(0,i.kt)("h3",{id:"schedule-a-pod-using-required-node-affinity"},"Schedule a Pod using required node affinity"),(0,i.kt)("p",null,"Apply the manifest to create a Pod that is scheduled onto your chosen node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{8,11}","{8,11}":!0},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: disktype\n            operator: In\n            values:\n            - ssd            \n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n")),(0,i.kt)("h3",{id:"schedule-a-pod-using-preferred-node-affinity"},"Schedule a Pod using preferred node affinity"),(0,i.kt)("p",null,"This manifest describes a Pod that has a preferredDuringSchedulingIgnoredDuringExecution node affinity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{8}","{8}":!0},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: disktype\n            operator: In\n            values:\n            - ssd          \n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n")))}f.isMDXComponent=!0}}]);