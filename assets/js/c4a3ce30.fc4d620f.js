"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[4499],{5788:(e,t,n)=>{n.d(t,{Iu:()=>c,yg:()=>f});var r=n(1504);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,f=p["".concat(l,".").concat(g)]||p[g]||m[g]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(5072),a=(n(1504),n(5788));const i={title:"Introduction"},o=void 0,s={unversionedId:"functional_programming/overview",id:"functional_programming/overview",title:"Introduction",description:"Functional Programming (FP for short) is a programming style that focuses on the functions in the program, for me a",source:"@site/sections/developer/functional_programming/overview.md",sourceDirName:"functional_programming",slug:"/functional_programming/overview",permalink:"/developer/functional_programming/overview",draft:!1,tags:[],version:"current",frontMatter:{title:"Introduction"}},l={},u=[{value:"Concepts",id:"concepts",level:2},{value:"Pure Functions",id:"pure-functions",level:3},{value:"Variables are Immutable",id:"variables-are-immutable",level:3},{value:"Referential Transparency",id:"referential-transparency",level:3},{value:"Recursion",id:"recursion",level:3},{value:"Functions are First-Class and can be Higher-Order",id:"functions-are-first-class-and-can-be-higher-order",level:3},{value:"Advantages",id:"advantages",level:2},{value:"Disadvantages",id:"disadvantages",level:2},{value:"Applications",id:"applications",level:2},{value:"Summary",id:"summary",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.c)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Functional Programming (FP for short) is a programming style that focuses on the functions in the program, for me a\nfunction may has a large spectrum of definitions. Pure FP programmers, stick by the mathematical definition that is\nfunctions are relations that maps arguments to results. Others admit that functions may have side effects."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"But what's a side effect ?")," A side effect refers simply to the modification of some kind of state - for instance:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Changing the value of a variable;"),(0,a.yg)("li",{parentName:"ul"},"Writing some data to disk;"),(0,a.yg)("li",{parentName:"ul"},"Enabling or disabling a button in the User Interface.")),(0,a.yg)("h2",{id:"concepts"},"Concepts"),(0,a.yg)("p",null,"FP comes with 5 important concepts that we will explain privily :"),(0,a.yg)("h3",{id:"pure-functions"},"Pure Functions"),(0,a.yg)("p",null,"A function is pure if it has two important properties :"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Deterministic: it produces the same output with the same arguments"),(0,a.yg)("li",{parentName:"ul"},"Immutable : it has no observable effect on the execution of the program other thant compute it's result. In other\nworlds, it doesn't modify any arguments, variables outside it's scope or have hidden I/O.")),(0,a.yg)("h3",{id:"variables-are-immutable"},"Variables are Immutable"),(0,a.yg)("p",null,"Variables are immutable i.e. it isn\u2019t possible to modify a variable once it has been initialized. Though we can create\na new variable, modifying existing variables is not allowed."),(0,a.yg)("h3",{id:"referential-transparency"},"Referential Transparency"),(0,a.yg)("p",null,"Variables once defined in a functional programming language aren\u2019t allowed to change the value that they are holding\nthroughout the execution of the program. This is known as referential transparency. It assures that the same language\nexpression gives the same output."),(0,a.yg)("h3",{id:"recursion"},"Recursion"),(0,a.yg)("p",null,"In FP there is no for and while loops. Instead, it relies heavily on recursion, since each iteration of a loop will\napply the same function until a specific condition is satisfied."),(0,a.yg)("h3",{id:"functions-are-first-class-and-can-be-higher-order"},"Functions are First-Class and can be Higher-Order"),(0,a.yg)("p",null,"Functions in the functional programming style are treated as variables. Hence, they are first-class functions.\nThese first-class functions are allowed to be passed to other functions as parameters or returned from functions or\nstored in data structures.\nA higher-order function is a function that takes other functions as arguments and/or returns functions. First-Class\nfunctions can be higher-order functions in functional programming languages."),(0,a.yg)("h2",{id:"advantages"},"Advantages"),(0,a.yg)("p",null,"Let's return to the subject, ",(0,a.yg)("em",{parentName:"p"},"why would I learn functional programming ?")," - FP helps to solve problems effectively and\nimproves modularity."),(0,a.yg)("h2",{id:"disadvantages"},"Disadvantages"),(0,a.yg)("h2",{id:"applications"},"Applications"),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this article, we introduced FP and explained what FP is and why you may want to use it. The benefits of this\nprogramming style will become clearer over the course of this series of articles. In the next couple of articles we will\ndeep dive into the fundamentals of FP and we will apply it's concepts and principles throught a series of coding\nexercises. We'll be using Scala programming language to showcase the implementations, but keep in mind that you can use\nthe programming language of you choice."),(0,a.yg)("p",null,"TBC"))}m.isMDXComponent=!0}}]);