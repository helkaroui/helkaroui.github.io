"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[1788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,m=p["".concat(u,".").concat(d)]||p[d]||y[d]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>s});var r=n(7462),a=(n(7294),n(3905)),o=n(4996);const i={title:"ReduceByKey vs GroupByKey"},l=void 0,u={unversionedId:"spark/02.5-optimizations/reducebykey_vs_groupbykey",id:"spark/02.5-optimizations/reducebykey_vs_groupbykey",title:"ReduceByKey vs GroupByKey",description:"In this article we are demystifying two known Spark Operators: reduceByKey and groupByKey",source:"@site/sections/data_processing/spark/02.5-optimizations/reducebykey_vs_groupbykey.mdx",sourceDirName:"spark/02.5-optimizations",slug:"/spark/02.5-optimizations/reducebykey_vs_groupbykey",permalink:"/data_processing/spark/02.5-optimizations/reducebykey_vs_groupbykey",draft:!1,tags:[],version:"current",frontMatter:{title:"ReduceByKey vs GroupByKey"},sidebar:"docs",previous:{title:"Quick wins",permalink:"/data_processing/spark/02.5-optimizations/quick_wins"},next:{title:"Quick Start",permalink:"/data_processing/kafka/"}},c={},s=[{value:"groupByKey",id:"groupbykey",level:2},{value:"reduceByKey",id:"reducebykey",level:2},{value:"When to avoid <code>groupByKey</code> ?",id:"when-to-avoid-groupbykey-",level:2},{value:"When to avoid <code>reduceByKey</code> ?",id:"when-to-avoid-reducebykey-",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:s},y="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(y,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this article we are demystifying two known Spark Operators: ",(0,a.kt)("inlineCode",{parentName:"p"},"reduceByKey")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByKey")),(0,a.kt)("h2",{id:"groupbykey"},"groupByKey"),(0,a.kt)("p",null,"Imagine a Dataset distributed in 3 partitions. The dataset consist of a transactional table with in each row the revenue\nof a store located in different countries. We want to sum these revenues at country level."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="GroupByKey example"',title:'"GroupByKey','example"':!0},'case class Record(country: String, revenue: Double)\n\nimport spark.implicits._\n\nval ds = Seq(\n    Record("USA", 112),\n    Record("USA", 250),\n    Record("USA", 360),\n    Record("INIDA", 102),\n    Record("INDIA", 205),\n).toDS[Record]\n\nds\n  .groupbByKey(_.country)\n  .mapGroups((country, revenues) => Record(country, revenues.map(_.revenue).sum))\n')),(0,a.kt)("p",null,"a ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByKey")," will start by moving data from original partitions and create a partition per country (aggregation key).\nThen, it will apply the aggregation function (here a ",(0,a.kt)("inlineCode",{parentName:"p"},"sum")," function)."),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{alt:"spark reducebykey",src:(0,o.Z)("/img/groupByKeyDiagram.svg")})),(0,a.kt)("p",null,"As shown in the diagram, the data will be repartitioned and thus a shuffle will take place. In real life data is not\nnaturally balanced, so in case where a key is too frequent, it's related data will be put in one partition."),(0,a.kt)("h2",{id:"reducebykey"},"reduceByKey"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"reduceByKey")," will operate in two steps: (1) In each partition it will apply the aggregation function locally\n(2) all the key-value pairs are then shuffled around, send over wire, and finally being reduced to get the final result."),(0,a.kt)("p",null,"Here is the implementation of the same example using reduceByKey :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'case class Record(country: String, revenue: Double)\n\nimport spark.implicits._\n\nval ds = Seq(\n    Record("USA", 112),\n    Record("USA", 250),\n    Record("USA", 360),\n    Record("INIDA", 102),\n    Record("INDIA", 205),\n).toDS[Record]\n\nds\n  .rdd\n  .keyBey(_.country)\n  .reduceByKey((r1, r2) => r1.copy(revenue = r1.revenue + r2.revenue ) )\n')),(0,a.kt)("p",null,"Look at the diagram below to understand what happens with reduceByKey. Notice how pairs on the same machine with the\nsame key are combined (by using the lamdba function passed into reduceByKey) before the data is shuffled. And only the\npartial sum results are sent over the wire to be reduced."),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{alt:"spark reducebykey",src:(0,o.Z)("/img/reduceByKeyDiagram.svg")})),(0,a.kt)("p",null,"This means we are more likely to have an OOM exception with a groupByKey than a reduceByKey."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h3",{parentName:"admonition",id:"how-oom-exception-occurs-"},"How OOM exception occurs ?"),(0,a.kt)("p",{parentName:"admonition"},"Spark spills data to disk when there is more data shuffled onto a single executor machine than can fit in memory.\nHowever, it flushes out the data to disk one key at a time - so if a single key has more key-value pairs than can fit\nin memory, an out of memory exception occurs.")),(0,a.kt)("p",null,"While both of these functions will produce the correct answer, the reduceByKey example works much better on a large\ndataset. That's because Spark knows it can combine output with a common key on each partition before shuffling the data."),(0,a.kt)("h2",{id:"when-to-avoid-groupbykey-"},"When to avoid ",(0,a.kt)("inlineCode",{parentName:"h2"},"groupByKey")," ?"),(0,a.kt)("p",null,"You can imagine that for a much larger dataset size, the difference in the amount of data you are shuffling becomes\nmore exaggerated and different between reduceByKey and groupByKey. Here are some rules when to avoid a ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByKey")," :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When returning a type different from your input value type. You would like to favor a ",(0,a.kt)("inlineCode",{parentName:"li"},"combineByKey")," in this case."),(0,a.kt)("li",{parentName:"ul"},"When merging the values for each key using an associative function. You would like to use a ",(0,a.kt)("inlineCode",{parentName:"li"},"foldByKey")," operator.")),(0,a.kt)("h2",{id:"when-to-avoid-reducebykey-"},"When to avoid ",(0,a.kt)("inlineCode",{parentName:"h2"},"reduceByKey")," ?"),(0,a.kt)("p",null,"This operator is only available with RDD API, thus switching from typed dataset to rdd and back, induces performance\nreduction due to java serialization."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Choosing the right operator can be tricky the first time, but can help to optimize long-running jobs quickly."))}d.isMDXComponent=!0}}]);