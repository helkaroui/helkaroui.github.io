"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[6171],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),i=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=i(r),d=a,m=f["".concat(o,".").concat(d)]||f[d]||u[d]||s;return r?n.createElement(m,c(c({ref:t},p),{},{components:r})):n.createElement(m,c({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,c=new Array(s);c[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var i=2;i<s;i++)c[i]=r[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3507:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const s={title:"Get field names of a case class"},c=void 0,l={unversionedId:"languages/scala/hacks & tricks/case-class-fields",id:"languages/scala/hacks & tricks/case-class-fields",title:"Get field names of a case class",description:"Often case classes represent the data moved further in the pipeline. For example, they can represent JSON data that will be written into your data warehouse storage or an RDBMS.",source:"@site/sections/developer/languages/scala/hacks & tricks/case-class-fields.md",sourceDirName:"languages/scala/hacks & tricks",slug:"/languages/scala/hacks & tricks/case-class-fields",permalink:"/developer/languages/scala/hacks & tricks/case-class-fields",draft:!1,tags:[],version:"current",frontMatter:{title:"Get field names of a case class"},sidebar:"docs",previous:{title:"OOP Basics",permalink:"/developer/languages/scala/course/oop-basics"},next:{title:"Pattern matching with Java objects",permalink:"/developer/languages/scala/hacks & tricks/pattern-matching-java"}},o={},i=[],p={toc:i};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Often case classes represent the data moved further in the pipeline. For example, they can represent JSON data that will be written into your data warehouse storage or an RDBMS."),(0,a.kt)("p",null,"If for whatever reason like defining a CREATE TABLE... expression with these fields, you need to get all fields from the case class, you can print them quite easily with the help of reflection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'  \n\nimport scala.reflect.runtime.universe._\n\ncase class MyData(column1: String, column2: Integer)\n\nobject TestFieldsPrinting {\n\n    def classAccessors[T: TypeTag]: List[MethodSymbol] = typeOf[T].members.collect {\n        case m: MethodSymbol if m.isCaseAccessor => m\n    }.toList\n\n    def main(args: Array[String]): Unit = {\n        val fields = classAccessors[MyData].map(field => field.name.toString).sorted.mkString(", ")\n        println(s"fields=${fields}")\n\n        assert(fields == "column1, column2")\n    }\n\n}\n')))}u.isMDXComponent=!0}}]);