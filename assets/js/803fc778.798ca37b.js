"use strict";(self.webpackChunksharek_dev=self.webpackChunksharek_dev||[]).push([[8739],{1690:e=>{e.exports=JSON.parse('{"pluginId":"projects","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Project: Nebula","collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/projects/scheduler/index","docId":"scheduler/index"},{"type":"link","label":"Concepts","href":"/projects/scheduler/concepts","docId":"scheduler/concepts"},{"type":"link","label":"Implementation","href":"/projects/scheduler/implementation","docId":"scheduler/implementation"},{"type":"category","label":"building blocks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Interfacing Multiple Languages","href":"/projects/scheduler/building blocks/multilangual","docId":"scheduler/building blocks/multilangual"}]}],"collapsible":true}]},"docs":{"scheduler/building blocks/multilangual":{"id":"scheduler/building blocks/multilangual","title":"Interfacing Multiple Languages","description":"In today\'s diverse software landscape, applications are often built using multiple programming languages to harness the strengths of each language and leverage existing codebases. While this can lead to powerful and efficient solutions, it also introduces challenges in integrating and communicating between different languages. Enter Py4J, a powerful tool that facilitates seamless interaction between Python and Java, enabling developers to harness the strengths of both languages within a single application. In this article, we\'ll explore the concept of interfacing multiple languages and walk through a practical example of integrating Python and Java using Py4J.","sidebar":"docs"},"scheduler/concepts":{"id":"scheduler/concepts","title":"Concepts","description":"Nebula is a general purpose workflow engine that runs workflows in a distributed fashion. It provides high-level APIs in Java, Scala, Python and JavaScript, and a workflow engine that supports DAG execution. It also supports a set of high-level tools such as Nebula-Actions for CICD pipelines support, Nebula-ML to manage the ML lifecycle.","sidebar":"docs"},"scheduler/implementation":{"id":"scheduler/implementation","title":"Implementation","description":"In this section, I\'ll explain the technical details of the Scheduler.","sidebar":"docs"},"scheduler/index":{"id":"scheduler/index","title":"Introduction","description":"In the fast-paced world of software development, the efficient execution of tasks and jobs is a critical factor in ensuring optimal performance and resource utilization. Job schedulers play a pivotal role in managing and automating these tasks, allowing developers to focus on higher-level functionalities while the scheduler takes care of the intricate details of task execution. This article delves into the core concepts of a job scheduler, with a focus on a scheduler written in the Scala programming language, which boasts compatibility with Python, Java, and YAML.","sidebar":"docs"}}}')}}]);